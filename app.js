// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram?.WebApp;
if (tg) {
    tg.expand();
    tg.enableClosingConfirmation();
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
    players: [], // –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    deck: [], // –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç
    bank: 0, // –ë–∞–Ω–∫ –∏–≥—Ä—ã
    currentBet: 0, // –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞
    currentPlayer: 0, // –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ (–∏–Ω–¥–µ–∫—Å)
    dealer: 0, // –ò–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–∞—é—â–µ–≥–æ
    gamePhase: 'waiting', // waiting, dealing, betting, showdown, swara
    baseBet: 50, // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
    botDelay: 1500, // –ó–∞–¥–µ—Ä–∂–∫–∞ —Ö–æ–¥–∞ –±–æ—Ç–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞—é initGame');
    initGame();
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (21 –∫–∞—Ä—Ç–∞ + –¥–∂–æ–∫–µ—Ä)
function createDeck() {
    const suits = ['‚ô•', '‚ô¶', '‚ô£', '‚ô†'];
    const ranks = ['10', 'J', 'Q', 'K', 'A'];
    const deck = [];

    for (const suit of suits) {
        for (const rank of ranks) {
            deck.push({
                suit,
                rank,
                value: rank === 'A' ? 11 : 10,
                color: (suit === '‚ô•' || suit === '‚ô¶') ? 'red' : 'black'
            });
        }
    }

    deck.push({
        suit: '‚òÖ',
        rank: 'Joker',
        value: 0,
        color: 'gold',
        isJoker: true
    });

    return deck;
}

// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
}

// –í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—é—â–µ–≥–æ
function chooseDealer() {
    gameState.deck = createDeck();
    shuffleDeck(gameState.deck);
    let tempDeck = [...gameState.deck];

    for (let i = 0; i < gameState.players.length; i++) {
        const card = tempDeck.pop();
        updateGameLog(`${gameState.players[i].name} –≤—ã—Ç—è–Ω—É–ª ${card.rank}${card.suit}`);
        if (card.rank === 'A') {
            gameState.dealer = i;
            updateGameLog(`${gameState.players[i].name} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–∞–∑–¥–∞—é—â–∏–º!`);
            break;
        }
    }

    startRound();
}

// –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞
function startRound() {
    gameState.gamePhase = 'dealing';
    gameState.bank = 0;
    gameState.currentBet = gameState.baseBet;
    gameState.currentPlayer = (gameState.dealer + 1) % gameState.players.length;

    gameState.players.forEach(player => {
        player.cards = [];
        player.isFolded = false;
        player.isBlind = false;
        player.bet = 0;
    });

    gameState.deck = createDeck();
    shuffleDeck(gameState.deck);

    gameState.players.forEach(player => {
        player.chips -= gameState.baseBet;
        player.bet = gameState.baseBet;
        gameState.bank += gameState.baseBet;
        updateGameLog(`${player.name} –≤–Ω–æ—Å–∏—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É (${gameState.baseBet})`);
    });

    dealCards();
    updateGameLog('–ö–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã!');
    startBetting();
}

// –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
function dealCards() {
    for (let i = 0; i < 3; i++) {
        for (const player of gameState.players) {
            if (gameState.deck.length > 0) {
                player.cards.push(gameState.deck.pop());
            }
        }
    }
}

// –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤
function startBetting() {
    gameState.gamePhase = 'betting';
    updateUI();
    updateGameLog('–ù–∞—á–∞–ª–∏—Å—å —Ç–æ—Ä–≥–∏!');
    if (gameState.players[gameState.currentPlayer].isBot) {
        setTimeout(() => makeBotMove(), gameState.botDelay);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    console.log('–û–±–Ω–æ–≤–ª—è—é UI');
    document.getElementById('bank-amount').textContent = gameState.bank;

    renderPlayerCards();
    renderOpponents();
    updatePlayerInfo();
    renderActions();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
function renderPlayerCards() {
    const container = document.getElementById('player-cards');
    container.innerHTML = '';

    const player = gameState.players[0];
    if (player.isBlind) {
        for (let i = 0; i < 3; i++) {
            const cardElement = document.createElement('div');
            cardElement.className = 'card back';
            cardElement.textContent = 'üÇ†';
            container.appendChild(cardElement);
        }
    } else {
        player.cards.forEach(card => {
            const cardElement = createCardElement(card);
            container.appendChild(cardElement);
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
function createCardElement(card) {
    const cardElement = document.createElement('div');
    cardElement.className = `card ${card.color} ${card.isJoker ? 'joker' : ''}`;
    cardElement.textContent = card.rank;
    cardElement.dataset.suit = card.suit;
    return cardElement;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–≤
function renderOpponents() {
    const container = document.getElementById('opponents');
    container.innerHTML = '';

    for (let i = 1; i < gameState.players.length; i++) {
        const player = gameState.players[i];
        const opponentElement = document.createElement('div');
        opponentElement.className = `opponent ${gameState.currentPlayer === i ? 'active-player' : ''} ${player.isBlind ? 'blind' : ''}`;
        opponentElement.innerHTML = `
            <div>${player.name}</div>
            <div>${player.chips} —Ñ–∏—à–µ–∫</div>
            <div>${player.isFolded ? '–°–±—Ä–æ—Å–∏–ª' : player.isBlind ? '–í —Ç—ë–º–Ω—É—é' : '–í –∏–≥—Ä–µ'}</div>
        `;
        container.appendChild(opponentElement);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ
function updatePlayerInfo() {
    document.getElementById('player-name').textContent = gameState.players[0].name;
    document.getElementById('player-chips').textContent = `${gameState.players[0].chips} —Ñ–∏—à–µ–∫`;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
function renderActions() {
    const container = document.getElementById('actions');
    container.innerHTML = '';

    const currentPlayer = gameState.players[gameState.currentPlayer];

    if (gameState.currentPlayer === 0 && !currentPlayer.isFolded && gameState.gamePhase === 'betting') {
        const foldBtn = document.createElement('button');
        foldBtn.className = 'action-btn fold-btn';
        foldBtn.textContent = '–°–±—Ä–æ—Å–∏—Ç—å';
        foldBtn.onclick = () => handleFold();
        container.appendChild(foldBtn);

        const callBtn = document.createElement('button');
        callBtn.className = 'action-btn check-btn';
        callBtn.textContent = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å';
        callBtn.onclick = () => handleCall();
        container.appendChild(callBtn);

        const raiseBtn = document.createElement('button');
        raiseBtn.className = 'action-btn bet-btn';
        raiseBtn.textContent = '–ü–æ–≤—ã—Å–∏—Ç—å';
        raiseBtn.onclick = () => handleRaise();
        container.appendChild(raiseBtn);

        if (gameState.currentPlayer === (gameState.dealer + 1) % gameState.players.length && !currentPlayer.isBlind) {
            const blindBtn = document.createElement('button');
            blindBtn.className = 'action-btn raise-btn';
            blindBtn.textContent = '–í —Ç—ë–º–Ω—É—é';
            blindBtn.onclick = () => handleBlind();
            container.appendChild(blindBtn);
        }

        const showdownBtn = document.createElement('button');
        showdownBtn.className = 'action-btn raise-btn';
        showdownBtn.textContent = '–í—Å–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã';
        showdownBtn.onclick = () => handleShowdown();
        container.appendChild(showdownBtn);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
function handleFold() {
    const player = gameState.players[0];
    player.isFolded = true;
    updateGameLog(`${player.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã`);
    nextPlayer();
}

function handleCall() {
    const player = gameState.players[0];
    const amount = gameState.currentBet - player.bet;
    if (amount > player.chips) {
        updateGameLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫!', true);
        return;
    }
    player.chips -= amount;
    player.bet += amount;
    gameState.bank += amount;
    updateGameLog(`${player.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç–∞–≤–∫—É (${amount})`);
    nextPlayer();
}

function handleRaise() {
    const player = gameState.players[0];
    const raiseAmount = gameState.currentBet * 2;
    const amount = raiseAmount - player.bet;
    if (amount > player.chips) {
        updateGameLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫!', true);
        return;
    }
    player.chips -= amount;
    player.bet += amount;
    gameState.bank += amount;
    gameState.currentBet = raiseAmount;
    updateGameLog(`${player.name} –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–æ ${raiseAmount}`);
    nextPlayer();
}

function handleBlind() {
    const player = gameState.players[0];
    const blindBet = gameState.currentBet * 2;
    const amount = blindBet - player.bet;
    if (amount > player.chips) {
        updateGameLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏—à–µ–∫!', true);
        return;
    }
    player.isBlind = true;
    player.chips -= amount;
    player.bet += amount;
    gameState.bank += amount;
    gameState.currentBet = blindBet;
    updateGameLog(`${player.name} –∏–≥—Ä–∞–µ—Ç –≤ —Ç—ë–º–Ω—É—é —Å —Å—Ç–∞–≤–∫–æ–π ${blindBet}`);
    updateUI();
    nextPlayer();
}

function handleShowdown() {
    gameState.gamePhase = 'showdown';
    updateGameLog('–í—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã!');
    determineWinner();
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
function nextPlayer() {
    do {
        gameState.currentPlayer = (gameState.currentPlayer + 1) % gameState.players.length;
    } while (gameState.players[gameState.currentPlayer].isFolded);

    updateUI();

    if (gameState.players[gameState.currentPlayer].isBot && gameState.gamePhase === 'betting') {
        setTimeout(() => makeBotMove(), gameState.botDelay);
    }
}

// –•–æ–¥ –±–æ—Ç–∞
function makeBotMove() {
    const bot = gameState.players[gameState.currentPlayer];
    const actions = [
        { name: 'fold', weight: bot.isBlind ? 0.1 : 0.3 },
        { name: 'call', weight: 0.5 },
        { name: 'raise', weight: 0.2 }
    ];

    const random = Math.random();
    let action;
    let cumulativeWeight = 0;

    for (const a of actions) {
        cumulativeWeight += a.weight;
        if (random <= cumulativeWeight) {
            action = a.name;
            break;
        }
    }

    const amount = gameState.currentBet - bot.bet;
    switch (action) {
        case 'fold':
            bot.isFolded = true;
            updateGameLog(`${bot.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã`);
            break;
        case 'call':
            if (amount <= bot.chips) {
                bot.chips -= amount;
                bot.bet += amount;
                gameState.bank += amount;
                updateGameLog(`${bot.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç–∞–≤–∫—É (${amount})`);
            } else {
                bot.isFolded = true;
                updateGameLog(`${bot.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ñ–∏—à–µ–∫`);
            }
            break;
        case 'raise':
            const raiseAmount = gameState.currentBet * 2;
            const raiseDiff = raiseAmount - bot.bet;
            if (raiseDiff <= bot.chips) {
                bot.chips -= raiseDiff;
                bot.bet += raiseDiff;
                gameState.bank += raiseDiff;
                gameState.currentBet = raiseAmount;
                updateGameLog(`${bot.name} –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–æ ${raiseAmount}`);
            } else {
                bot.isFolded = true;
                updateGameLog(`${bot.name} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ñ–∏—à–µ–∫`);
            }
            break;
    }

    nextPlayer();
}

// –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
function calculatePoints(cards) {
    const hasJoker = cards.some(card => card.isJoker);
    const nonJokerCards = cards.filter(card => !card.isJoker);

    const sameSuit = nonJokerCards.every(card => card.suit === nonJokerCards[0]?.suit);
    if (sameSuit || (hasJoker && nonJokerCards.length <= 2)) {
        return cards.reduce((sum, card) => sum + (card.isJoker ? 10 : card.value), 0);
    }

    const sameRank = nonJokerCards.every(card => card.rank === nonJokerCards[0]?.rank);
    if (sameRank || (hasJoker && nonJokerCards.length === 2 && nonJokerCards[0].rank === nonJokerCards[1].rank)) {
        return cards.reduce((sum, card) => sum + (card.isJoker ? 10 : card.value), 0);
    }

    return Math.max(...cards.map(card => card.isJoker ? 10 : card.value));
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function determineWinner() {
    const activePlayers = gameState.players.filter(player => !player.isFolded);
    if (activePlayers.length === 0) {
        updateGameLog('–ù–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–ª—Å—è –≤ –∏–≥—Ä–µ!');
        startRound();
        return;
    }

    const scores = activePlayers.map(player => ({
        player,
        points: calculatePoints(player.cards)
    }));

    const maxPoints = Math.max(...scores.map(s => s.points));
    const winners = scores.filter(s => s.points === maxPoints);

    activePlayers.forEach(player => {
        const cardsStr = player.cards.map(c => `${c.rank}${c.suit}`).join(', ');
        const points = calculatePoints(player.cards);
        updateGameLog(`${player.name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã: ${cardsStr} (${points} –æ—á–∫–æ–≤)`);
    });

    if (winners.length === 1) {
        const winner = winners[0].player;
        winner.chips += gameState.bank;
        updateGameLog(`${winner.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫ (${gameState.bank})!`);
        startRound();
    } else {
        updateGameLog('–ù–∏—á—å—è! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–≤–∞—Ä–∞.');
        startSwara(winners.map(w => w.player));
    }
}

// –°–≤–∞—Ä–∞
function startSwara(winners) {
    gameState.gamePhase = 'swara';
    gameState.players.forEach(player => {
        if (!winners.includes(player)) {
            player.isFolded = true;
        } else {
            const swaraBet = gameState.baseBet;
            if (player.chips >= swaraBet) {
                player.chips -= swaraBet;
                player.bet += swaraBet;
                gameState.bank += swaraBet;
                updateGameLog(`${player.name} –≤–Ω–æ—Å–∏—Ç —Å—Ç–∞–≤–∫—É –≤ —Å–≤–∞—Ä—É (${swaraBet})`);
            } else {
                player.isFolded = true;
                updateGameLog(`${player.name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ —Å–≤–∞—Ä—ã –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ñ–∏—à–µ–∫`);
            }
        }
    });

    gameState.deck = createDeck();
    shuffleDeck(gameState.deck);
    dealCards();
    updateGameLog('–ö–∞—Ä—Ç—ã –¥–ª—è —Å–≤–∞—Ä—ã —Ä–æ–∑–¥–∞–Ω—ã!');
    determineWinner();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
function updateGameLog(message, isError = false) {
    const logElement = document.getElementById('game-log');
    const messageElement = document.createElement('p');
    messageElement.textContent = message;
    if (isError) messageElement.style.color = '#e74c3c';
    logElement.appendChild(messageElement);
    logElement.scrollTop = logElement.scrollHeight;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    console.log('–ó–∞–ø—É—Å–∫–∞—é initGame');
    const playerName = tg?.initDataUnsafe?.user?.first_name || '–í—ã';
    gameState.players = [
        { id: 1, name: playerName, chips: 1000, cards: [], isFolded: false, isBot: false, isBlind: false, bet: 0 },
        { id: 2, name: '–ê–ª–µ–∫—Å–µ–π', chips: 1000, cards: [], isFolded: false, isBot: true, isBlind: false, bet: 0 },
        { id: 3, name: '–ú–∞—Ä–∏—è', chips: 1000, cards: [], isFolded: false, isBot: true, isBlind: false, bet: 0 }
    ];

    chooseDealer();
}
